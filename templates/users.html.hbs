<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width"/>
    <title>Copiosis</title>
    <style>
    table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
        padding: 1px 10px;
    }

    </style>
</head>
<body>
<h1>Copiosis admin custom build edition</h1>
<p>A custom build of the copiosis-rocket project with improvements</p>
<p>
    <b><a href="/users">Show users</a></b> &middot;
    <a href="/products">Show products</a> &middot;
    <a href="/transfers">Show transactions</a>
    <br>
    <a href="/adduser">Add user</a> &middot;
    <a href="/product">Add product</a> &middot;
    <a href="/transfer">Create transaction</a>
</p>
<h3>Showing all users</h3>

<form action="/user/product" method="post" id="productform">
    <label for="product_id">Select product to assign:</label>
    <select name="product_id" id="product_id" form="productform" required>
        {{#each products}}
            <option value="{{id}}">#{{id}} {{name}}</option>
        {{/each}}
    </select>
    <br><br>

    <div class="table-controls">
        <div class="table-info">
            <label for="entries">Show</label>
            <select id="entries" onchange="updateTable()">
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
            <span>entries</span>
        </div>
        <div class="search-box">
            <input type="text" size="29" id="search" placeholder="Search..." onkeyup="searchTable()">
        </div>
    </div>

    <table id="user-table">
        <thead>
        <tr>
            <th onclick="sortTable(0)">ID <span class="sort-arrow" id="sort-arrow-0">▲▼</span></th>
            <th onclick="sortTable(1)">Name <span class="sort-arrow" id="sort-arrow-1">▲▼</span></th>
            <th onclick="sortTable(2)">NBR <span class="sort-arrow" id="sort-arrow-1">▲▼</span></th>
            <th>
                <a href="/fame" target="_blank">Prestige</a>
                <span onclick="sortTable(3)"><span class="sort-arrow" id="sort-arrow-2">▲▼</span></th>
            </th>
            <th onclick="sortTable(4)">Created <span class="sort-arrow" id="sort-arrow-3">▲▼</span></th>
            <th>Operation</th>
        </tr>
        </thead>
        <tbody>
        {{#each users}}
            <tr>
                <td>{{id}}</td>
                <td>{{name}}</td>
                <td style="overflow: hidden; max-width: 66px;">{{nbr}}</td>
                <td style="overflow: hidden; max-width: 66px;">{{fame}}</td>
                <td>{{time_created}}</td>
                <td>
                    <button type="submit" value="{{id}}" name="user_id">Assign product</button>
                </td>
            </tr>
        {{/each}}
        </tbody>
    </table>
</form>

<div class="table-pagination">
    <span id="table-info"></span>
    <button onclick="prevPage()">Previous</button>
    <span id="page-numbers"></span>
    <button onclick="nextPage()">Next</button>
</div>

<script>
    let currentPage = 1;
    let entriesPerPage = 25;
    let sortDirection = true; // true = ascending, false = descending
    const maxPageButtons = 10;

    function updateTable() {
        entriesPerPage = parseInt(document.getElementById("entries").value);
        currentPage = 1;
        displayTable();
    }

    function searchTable() {
        currentPage = 1;
        displayTable();
    }

    function displayTable() {
        const table = document.getElementById("user-table");
        const tbody = table.querySelector("tbody");
        const rows = Array.from(tbody.querySelectorAll("tr"));
        const searchText = document.getElementById("search").value.toLowerCase();

        const filteredRows = rows.filter(row => row.innerText.toLowerCase().includes(searchText));

        const totalEntries = filteredRows.length;
        const totalPages = Math.ceil(totalEntries / entriesPerPage);
        const start = (currentPage - 1) * entriesPerPage;
        const end = start + entriesPerPage;

        rows.forEach(row => row.style.display = "none");
        filteredRows.slice(start, end).forEach(row => row.style.display = "");

        document.getElementById("table-info").innerText = `Showing ${start + 1} to ${Math.min(end, totalEntries)} of ${totalEntries} entries`;
        updatePageNumbers(totalPages);
    }

    function updatePageNumbers(totalPages) {
        const pageNumbers = document.getElementById("page-numbers");
        pageNumbers.innerHTML = "";

        const startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
        const endPage = Math.min(totalPages, startPage + maxPageButtons - 1);

        for (let i = startPage; i <= endPage; i++) {
            const pageButton = document.createElement("button");
            pageButton.className = "pagination-button";
            if (i === currentPage) pageButton.classList.add("active");
            pageButton.innerText = i;
            pageButton.onclick = () => {
                currentPage = i;
                displayTable();
            };
            pageNumbers.appendChild(pageButton);
        }
    }

    function nextPage() {
        currentPage++;
        displayTable();
    }

    function prevPage() {
        currentPage = Math.max(1, currentPage - 1);
        displayTable();
    }

    function sortTable(n) {
        const table = document.getElementById("user-table");
        let rows = Array.from(table.querySelector("tbody").rows);

        rows.sort((a, b) => {
            let x = a.cells[n].innerText.toLowerCase();
            let y = b.cells[n].innerText.toLowerCase();
            return sortDirection ? (x > y ? 1 : -1) : (x < y ? 1 : -1);
        });

        sortDirection = !sortDirection;
        rows.forEach(row => table.querySelector("tbody").appendChild(row));

        document.querySelectorAll(".sort-arrow").forEach(arrow => arrow.innerText = "▲▼");
        document.getElementById(`sort-arrow-${n}`).innerText = sortDirection ? "▲" : "▼";

        displayTable();
    }

    displayTable();

    document.addEventListener("DOMContentLoaded", () => {
        const urlParams = new URLSearchParams(window.location.search);
        const producer = urlParams.get("producer");
        const product = urlParams.get("product");

        if (producer) {
            document.getElementById("search").value = producer;
            searchTable(); // Trigger search if required
        }

        if (product) {
            const productSelect = document.getElementById("product_id");
            for (let option of productSelect.options) {
                if (option.text.includes(product)) {
                    option.selected = true;
                    break;
                }
            }
        }
    });
</script>
</body>
</html>
